openapi: 3.0.3
info:
  title: Unsichere API
  version: 1.0.0

servers:
  - url: '{protocol}://{host}:{port}/'
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        default: "8080"


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        preis:
          type: number
          format: double
        thumbnail:
          type: string
        rabatt:
          type: number
          format: int16
        created_at:
          type: string
          format: date-time
    OrderProduct:
      type: object
      properties:
        id:
          type: integer
          format: int64
        order_id:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int16
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        products:
          type: array
          items:
            $ref: "#/components/schemas/OrderProduct"
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
        product_id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        rating:
          type: integer
          format: int16
        review_text:
          type: string
        created_at:
          type: string
          format: date-time

paths:
  /:
    get:
      summary: "API Root"
      responses:
        200:
          description: "OK"
  /users/register:
    post:
      summary: "Register a new user"
      requestBody:
          description: "User registration details"
          required: true
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  username:
                    type: "string"
                  email:
                    type: "string"
                  password:
                    type: "string"
      responses:
        201:
          description: "User registered successfully"
          content:
            application/json:
              shema:
                type: "object"
                properties:
                  token:
                    type: "string"
        409:
          description: "User already exists"
        500:
          description: "Server error"
  /users/login:
    post:
      summary: "Login a user"
      requestBody:
          description: "User login details"
          required: true
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  username:
                    type: "string"
                  password:
                    type: "string"
      responses:
        200:
          description: "Login successful"
          content:
            application/json:
              shema:
                type: "object"
                properties:
                  token:
                    type: "string"
        404:
          description: "User not found"
        401:
          description: "Invalid password"
        500:
          description: "Server error"
  /users/{userId}:
    get:
      summary: "Get user info"
      security:
        - {}
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "User info"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  id:
                    type: "integer"
                  username:
                    type: "string"
                  email:
                    type: "string"
        404:
          description: "User not found"
        500:
          description: "Server error"
    delete:
      summary: "Delete user. Needs admin rights or user id must match the token user id"
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "User deleted"
        403:
          description: "Unauthorized"
        500:
          description: "Server error"
  /products:
    get:
      summary: Alle Produkte
      description: Gibt alle Produkte zurück
      responses:
        200:
          description: Erfolgreich
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /products/{id}:
    get:
      summary: Ein Produkt
      description: Gibt ein Produkt zurück
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Erfolgreich
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  /products/search/{name}:
    get:
      summary: Suche nach Produkten
      description: Suche nach Produkten
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Erfolgreich
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
  /order:
    post:
      summary: Bestellung aufgeben
      description: Bestellung aufgeben
      security:
        - bearerAuth: []
      requestBody:
          description: "Bestellungsdetails"
          required: true
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    productId:
                      type: "integer"
                    quantity:
                      type: "integer"
      responses:
        201:
          description: "Bestellung erfolgreich"
        404:
          description: "Produkt nicht gefunden"
        500:
          description: "Server error"
  /orders:
    get:
      summary: Alle Bestellungen
      description: Gibt alle Bestellungen zurück
      security:
        - bearerAuth: []
      responses:
        200:
          description: Erfolgreich
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
  /orders/{id}:
    get:
      summary: Eine Bestellung
      description: Gibt eine Bestellung zurück
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Erfolgreich
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /reviews/product/{product_id}:
    get:
      summary: Alle Bewertungen
      description: Gibt alle Bewertungen zurück
      parameters:
        - name: product_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Erfolgreich
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
  /reviews/user/{user_id}:
    get:
      summary: Alle Bewertungen von Nutzer
      description: Gibt alle Bewertungen eines Nutzers zurück
      parameters:
        - name: user_id
          in: path
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: Erfolgreich
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
  /reviews:
    post:
      summary: Bewertung abgeben
      description: Bewertung abgeben
      security:
        - bearerAuth: []
      requestBody:
          description: "Bewertungsdetails"
          required: true
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  product_id:
                    type: "integer"
                  rating:
                    type: "integer"
                  review_text:
                    type: "string"
      responses:
        201:
          description: "Bewertung erfolgreich"
        404:
          description: "Produkt nicht gefunden"
        500:
          description: "Server error"

